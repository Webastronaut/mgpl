/*
 * generated by Xtext 2.16.0
 */
package mgpl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mgpl.ide.contentassist.antlr.internal.InternalMGPLParser;
import mgpl.services.MGPLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MGPLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGPLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGPLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclAccess().getAlternatives_0(), "rule__Decl__Alternatives_0");
			builder.put(grammarAccess.getVarDeclAccess().getAlternatives_2(), "rule__VarDecl__Alternatives_2");
			builder.put(grammarAccess.getObjDeclAccess().getAlternatives_2(), "rule__ObjDecl__Alternatives_2");
			builder.put(grammarAccess.getObjTypeAccess().getAlternatives(), "rule__ObjType__Alternatives");
			builder.put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
			builder.put(grammarAccess.getKeyStrokeAccess().getAlternatives(), "rule__KeyStroke__Alternatives");
			builder.put(grammarAccess.getStmtAccess().getAlternatives(), "rule__Stmt__Alternatives");
			builder.put(grammarAccess.getAllDeclsAccess().getAlternatives(), "rule__AllDecls__Alternatives");
			builder.put(grammarAccess.getRelExprAccess().getAlternatives_1_0(), "rule__RelExpr__Alternatives_1_0");
			builder.put(grammarAccess.getAddExprAccess().getAlternatives_1_0(), "rule__AddExpr__Alternatives_1_0");
			builder.put(grammarAccess.getMultExprAccess().getAlternatives_1_0(), "rule__MultExpr__Alternatives_1_0");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives_0_0(), "rule__UnaryExpr__Alternatives_0_0");
			builder.put(grammarAccess.getPrimExprAccess().getAlternatives(), "rule__PrimExpr__Alternatives");
			builder.put(grammarAccess.getProgAccess().getGroup(), "rule__Prog__Group__0");
			builder.put(grammarAccess.getProgAccess().getGroup_3(), "rule__Prog__Group_3__0");
			builder.put(grammarAccess.getProgAccess().getGroup_3_1(), "rule__Prog__Group_3_1__0");
			builder.put(grammarAccess.getDeclAccess().getGroup(), "rule__Decl__Group__0");
			builder.put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
			builder.put(grammarAccess.getVarDeclAccess().getGroup_2_1(), "rule__VarDecl__Group_2_1__0");
			builder.put(grammarAccess.getInitAccess().getGroup(), "rule__Init__Group__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup(), "rule__ObjDecl__Group__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup_2_0(), "rule__ObjDecl__Group_2_0__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup_2_0_1(), "rule__ObjDecl__Group_2_0_1__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup_2_0_1_1(), "rule__ObjDecl__Group_2_0_1_1__0");
			builder.put(grammarAccess.getObjDeclAccess().getGroup_2_1(), "rule__ObjDecl__Group_2_1__0");
			builder.put(grammarAccess.getAttrAssAccess().getGroup(), "rule__AttrAss__Group__0");
			builder.put(grammarAccess.getAnimBlockAccess().getGroup(), "rule__AnimBlock__Group__0");
			builder.put(grammarAccess.getParamDeclAccess().getGroup(), "rule__ParamDecl__Group__0");
			builder.put(grammarAccess.getEventBlockAccess().getGroup(), "rule__EventBlock__Group__0");
			builder.put(grammarAccess.getStmtBlockAccess().getGroup(), "rule__StmtBlock__Group__0");
			builder.put(grammarAccess.getStmtAccess().getGroup_2(), "rule__Stmt__Group_2__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_5(), "rule__IfStmt__Group_5__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
			builder.put(grammarAccess.getAssStmtAccess().getGroup(), "rule__AssStmt__Group__0");
			builder.put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
			builder.put(grammarAccess.getVarAccess().getGroup_1(), "rule__Var__Group_1__0");
			builder.put(grammarAccess.getVarAccess().getGroup_2(), "rule__Var__Group_2__0");
			builder.put(grammarAccess.getDisjExprAccess().getGroup(), "rule__DisjExpr__Group__0");
			builder.put(grammarAccess.getDisjExprAccess().getGroup_1(), "rule__DisjExpr__Group_1__0");
			builder.put(grammarAccess.getConjExprAccess().getGroup(), "rule__ConjExpr__Group__0");
			builder.put(grammarAccess.getConjExprAccess().getGroup_1(), "rule__ConjExpr__Group_1__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup(), "rule__RelExpr__Group__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup_1(), "rule__RelExpr__Group_1__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup_1_0_0(), "rule__RelExpr__Group_1_0_0__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup_1_0_1(), "rule__RelExpr__Group_1_0_1__0");
			builder.put(grammarAccess.getRelExprAccess().getGroup_1_0_2(), "rule__RelExpr__Group_1_0_2__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup(), "rule__AddExpr__Group__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup_1(), "rule__AddExpr__Group_1__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup_1_0_0(), "rule__AddExpr__Group_1_0_0__0");
			builder.put(grammarAccess.getAddExprAccess().getGroup_1_0_1(), "rule__AddExpr__Group_1_0_1__0");
			builder.put(grammarAccess.getMultExprAccess().getGroup(), "rule__MultExpr__Group__0");
			builder.put(grammarAccess.getMultExprAccess().getGroup_1(), "rule__MultExpr__Group_1__0");
			builder.put(grammarAccess.getMultExprAccess().getGroup_1_0_0(), "rule__MultExpr__Group_1_0_0__0");
			builder.put(grammarAccess.getMultExprAccess().getGroup_1_0_1(), "rule__MultExpr__Group_1_0_1__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0(), "rule__UnaryExpr__Group_0__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0_0_0(), "rule__UnaryExpr__Group_0_0_0__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_0_0_1(), "rule__UnaryExpr__Group_0_0_1__0");
			builder.put(grammarAccess.getPrimExprAccess().getGroup_0(), "rule__PrimExpr__Group_0__0");
			builder.put(grammarAccess.getPrimExprAccess().getGroup_1(), "rule__PrimExpr__Group_1__0");
			builder.put(grammarAccess.getPrimExprAccess().getGroup_1_1(), "rule__PrimExpr__Group_1_1__0");
			builder.put(grammarAccess.getPrimExprAccess().getGroup_2(), "rule__PrimExpr__Group_2__0");
			builder.put(grammarAccess.getProgAccess().getNameAssignment_1(), "rule__Prog__NameAssignment_1");
			builder.put(grammarAccess.getProgAccess().getAttrAssignment_3_0(), "rule__Prog__AttrAssignment_3_0");
			builder.put(grammarAccess.getProgAccess().getAttrAssignment_3_1_1(), "rule__Prog__AttrAssignment_3_1_1");
			builder.put(grammarAccess.getProgAccess().getDeclarationsAssignment_5(), "rule__Prog__DeclarationsAssignment_5");
			builder.put(grammarAccess.getProgAccess().getInitAssignment_6(), "rule__Prog__InitAssignment_6");
			builder.put(grammarAccess.getProgAccess().getBlocksAssignment_7(), "rule__Prog__BlocksAssignment_7");
			builder.put(grammarAccess.getVarDeclAccess().getTypeAssignment_0(), "rule__VarDecl__TypeAssignment_0");
			builder.put(grammarAccess.getVarDeclAccess().getNameAssignment_1(), "rule__VarDecl__NameAssignment_1");
			builder.put(grammarAccess.getVarDeclAccess().getInitAssignment_2_0(), "rule__VarDecl__InitAssignment_2_0");
			builder.put(grammarAccess.getVarDeclAccess().getLengthAssignment_2_1_2(), "rule__VarDecl__LengthAssignment_2_1_2");
			builder.put(grammarAccess.getObjDeclAccess().getTypeAssignment_0(), "rule__ObjDecl__TypeAssignment_0");
			builder.put(grammarAccess.getObjDeclAccess().getNameAssignment_1(), "rule__ObjDecl__NameAssignment_1");
			builder.put(grammarAccess.getObjDeclAccess().getAttrAssignment_2_0_1_0(), "rule__ObjDecl__AttrAssignment_2_0_1_0");
			builder.put(grammarAccess.getObjDeclAccess().getAttrAssignment_2_0_1_1_1(), "rule__ObjDecl__AttrAssignment_2_0_1_1_1");
			builder.put(grammarAccess.getObjDeclAccess().getLengthAssignment_2_1_2(), "rule__ObjDecl__LengthAssignment_2_1_2");
			builder.put(grammarAccess.getAttrAssAccess().getNameAssignment_0(), "rule__AttrAss__NameAssignment_0");
			builder.put(grammarAccess.getAttrAssAccess().getValueAssignment_2(), "rule__AttrAss__ValueAssignment_2");
			builder.put(grammarAccess.getAnimBlockAccess().getNameAssignment_1(), "rule__AnimBlock__NameAssignment_1");
			builder.put(grammarAccess.getAnimBlockAccess().getParamAssignment_3(), "rule__AnimBlock__ParamAssignment_3");
			builder.put(grammarAccess.getAnimBlockAccess().getStmtBlockAssignment_5(), "rule__AnimBlock__StmtBlockAssignment_5");
			builder.put(grammarAccess.getParamDeclAccess().getTypeAssignment_0(), "rule__ParamDecl__TypeAssignment_0");
			builder.put(grammarAccess.getParamDeclAccess().getNameAssignment_1(), "rule__ParamDecl__NameAssignment_1");
			builder.put(grammarAccess.getEventBlockAccess().getKeyStrokeAssignment_1(), "rule__EventBlock__KeyStrokeAssignment_1");
			builder.put(grammarAccess.getEventBlockAccess().getStmtBlockAssignment_2(), "rule__EventBlock__StmtBlockAssignment_2");
			builder.put(grammarAccess.getStmtBlockAccess().getStmtsAssignment_2(), "rule__StmtBlock__StmtsAssignment_2");
			builder.put(grammarAccess.getIfStmtAccess().getConditionAssignment_2(), "rule__IfStmt__ConditionAssignment_2");
			builder.put(grammarAccess.getIfStmtAccess().getThenBlockAssignment_4(), "rule__IfStmt__ThenBlockAssignment_4");
			builder.put(grammarAccess.getIfStmtAccess().getElseBlockAssignment_5_1(), "rule__IfStmt__ElseBlockAssignment_5_1");
			builder.put(grammarAccess.getForStmtAccess().getInitAssignment_2(), "rule__ForStmt__InitAssignment_2");
			builder.put(grammarAccess.getForStmtAccess().getConditionAssignment_4(), "rule__ForStmt__ConditionAssignment_4");
			builder.put(grammarAccess.getForStmtAccess().getLoopAssignment_6(), "rule__ForStmt__LoopAssignment_6");
			builder.put(grammarAccess.getForStmtAccess().getStmtBlockAssignment_8(), "rule__ForStmt__StmtBlockAssignment_8");
			builder.put(grammarAccess.getAssStmtAccess().getVariableAssignment_0(), "rule__AssStmt__VariableAssignment_0");
			builder.put(grammarAccess.getAssStmtAccess().getExpressionAssignment_2(), "rule__AssStmt__ExpressionAssignment_2");
			builder.put(grammarAccess.getVarAccess().getIdAssignment_0(), "rule__Var__IdAssignment_0");
			builder.put(grammarAccess.getVarAccess().getIndexAssignment_1_2(), "rule__Var__IndexAssignment_1_2");
			builder.put(grammarAccess.getVarAccess().getMemberNameAssignment_2_2(), "rule__Var__MemberNameAssignment_2_2");
			builder.put(grammarAccess.getDisjExprAccess().getRightAssignment_1_2(), "rule__DisjExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getConjExprAccess().getRightAssignment_1_2(), "rule__ConjExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getRelExprAccess().getRightAssignment_1_1(), "rule__RelExpr__RightAssignment_1_1");
			builder.put(grammarAccess.getAddExprAccess().getRightAssignment_1_1(), "rule__AddExpr__RightAssignment_1_1");
			builder.put(grammarAccess.getMultExprAccess().getRightAssignment_1_1(), "rule__MultExpr__RightAssignment_1_1");
			builder.put(grammarAccess.getUnaryExprAccess().getExprAssignment_0_1(), "rule__UnaryExpr__ExprAssignment_0_1");
			builder.put(grammarAccess.getPrimExprAccess().getValueAssignment_0_1(), "rule__PrimExpr__ValueAssignment_0_1");
			builder.put(grammarAccess.getPrimExprAccess().getRightAssignment_1_1_2(), "rule__PrimExpr__RightAssignment_1_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGPLGrammarAccess grammarAccess;

	@Override
	protected InternalMGPLParser createParser() {
		InternalMGPLParser result = new InternalMGPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_COMMENT" };
	}

	public MGPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
