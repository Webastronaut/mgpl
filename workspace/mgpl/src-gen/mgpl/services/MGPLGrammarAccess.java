/*
 * generated by Xtext 2.16.0
 */
package mgpl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MGPLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Prog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttrAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cAttrAttrAssParserRuleCall_3_0_0 = (RuleCall)cAttrAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAttrAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cAttrAttrAssParserRuleCall_3_1_1_0 = (RuleCall)cAttrAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsDeclParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Assignment cInitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitStmtBlockParserRuleCall_6_0 = (RuleCall)cInitAssignment_6.eContents().get(0);
		private final Assignment cBlocksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlocksBlockParserRuleCall_7_0 = (RuleCall)cBlocksAssignment_7.eContents().get(0);
		
		//// ### MGPL-Grammatik
		//Prog:
		//	'game' name=IDF
		//	'(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')'
		//	declarations+=Decl*
		//	init=StmtBlock
		//	blocks+=Block*;
		@Override public ParserRule getRule() { return rule; }
		
		//'game' name=IDF '(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')' declarations+=Decl* init=StmtBlock blocks+=Block*
		public Group getGroup() { return cGroup; }
		
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(attr+=AttrAss (',' attr+=AttrAss)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//attr+=AttrAss
		public Assignment getAttrAssignment_3_0() { return cAttrAssignment_3_0; }
		
		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_3_0_0() { return cAttrAttrAssParserRuleCall_3_0_0; }
		
		//(',' attr+=AttrAss)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//attr+=AttrAss
		public Assignment getAttrAssignment_3_1_1() { return cAttrAssignment_3_1_1; }
		
		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_3_1_1_0() { return cAttrAttrAssParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//declarations+=Decl*
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }
		
		//Decl
		public RuleCall getDeclarationsDeclParserRuleCall_5_0() { return cDeclarationsDeclParserRuleCall_5_0; }
		
		//init=StmtBlock
		public Assignment getInitAssignment_6() { return cInitAssignment_6; }
		
		//StmtBlock
		public RuleCall getInitStmtBlockParserRuleCall_6_0() { return cInitStmtBlockParserRuleCall_6_0; }
		
		//blocks+=Block*
		public Assignment getBlocksAssignment_7() { return cBlocksAssignment_7; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_7_0() { return cBlocksBlockParserRuleCall_7_0; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVarDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cObjDeclParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Decl:
		//	(VarDecl | ObjDecl) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(VarDecl | ObjDecl) ';'
		public Group getGroup() { return cGroup; }
		
		//VarDecl | ObjDecl
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0_0() { return cVarDeclParserRuleCall_0_0; }
		
		//ObjDecl
		public RuleCall getObjDeclParserRuleCall_0_1() { return cObjDeclParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInitAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cInitInitParserRuleCall_2_0_0 = (RuleCall)cInitAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cArrayDeclVariableAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cLengthAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cLengthNUMBERTerminalRuleCall_2_1_2_0 = (RuleCall)cLengthAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//VarDecl:
		//	type='int' name=IDF (init=Init? | {ArrayDecl.variable=current} '[' length=NUMBER ']');
		@Override public ParserRule getRule() { return rule; }
		
		//type='int' name=IDF (init=Init? | {ArrayDecl.variable=current} '[' length=NUMBER ']')
		public Group getGroup() { return cGroup; }
		
		//type='int'
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//'int'
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//init=Init? | {ArrayDecl.variable=current} '[' length=NUMBER ']'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//init=Init?
		public Assignment getInitAssignment_2_0() { return cInitAssignment_2_0; }
		
		//Init
		public RuleCall getInitInitParserRuleCall_2_0_0() { return cInitInitParserRuleCall_2_0_0; }
		
		//{ArrayDecl.variable=current} '[' length=NUMBER ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{ArrayDecl.variable=current}
		public Action getArrayDeclVariableAction_2_1_0() { return cArrayDeclVariableAction_2_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_1() { return cLeftSquareBracketKeyword_2_1_1; }
		
		//length=NUMBER
		public Assignment getLengthAssignment_2_1_2() { return cLengthAssignment_2_1_2; }
		
		//NUMBER
		public RuleCall getLengthNUMBERTerminalRuleCall_2_1_2_0() { return cLengthNUMBERTerminalRuleCall_2_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}
	public class InitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Init");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Init:
		//	'=' Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' Expr
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class ObjDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ObjDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cAttrAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cAttrAttrAssParserRuleCall_2_0_1_0_0 = (RuleCall)cAttrAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cAttrAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cAttrAttrAssParserRuleCall_2_0_1_1_1_0 = (RuleCall)cAttrAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Action cArrayDeclVariableAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cLengthAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cLengthNUMBERTerminalRuleCall_2_1_2_0 = (RuleCall)cLengthAssignment_2_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//ObjDecl:
		//	type=ObjType name=IDF ('(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')' | {ArrayDecl.variable=current} '[' length=NUMBER
		//	']');
		@Override public ParserRule getRule() { return rule; }
		
		//type=ObjType name=IDF ('(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')' | {ArrayDecl.variable=current} '[' length=NUMBER
		//']')
		public Group getGroup() { return cGroup; }
		
		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ObjType
		public RuleCall getTypeObjTypeParserRuleCall_0_0() { return cTypeObjTypeParserRuleCall_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')' | {ArrayDecl.variable=current} '[' length=NUMBER ']'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//(attr+=AttrAss (',' attr+=AttrAss)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//attr+=AttrAss
		public Assignment getAttrAssignment_2_0_1_0() { return cAttrAssignment_2_0_1_0; }
		
		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_2_0_1_0_0() { return cAttrAttrAssParserRuleCall_2_0_1_0_0; }
		
		//(',' attr+=AttrAss)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//attr+=AttrAss
		public Assignment getAttrAssignment_2_0_1_1_1() { return cAttrAssignment_2_0_1_1_1; }
		
		//AttrAss
		public RuleCall getAttrAttrAssParserRuleCall_2_0_1_1_1_0() { return cAttrAttrAssParserRuleCall_2_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
		
		//{ArrayDecl.variable=current} '[' length=NUMBER ']'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//{ArrayDecl.variable=current}
		public Action getArrayDeclVariableAction_2_1_0() { return cArrayDeclVariableAction_2_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1_1() { return cLeftSquareBracketKeyword_2_1_1; }
		
		//length=NUMBER
		public Assignment getLengthAssignment_2_1_2() { return cLengthAssignment_2_1_2; }
		
		//NUMBER
		public RuleCall getLengthNUMBERTerminalRuleCall_2_1_2_0() { return cLengthNUMBERTerminalRuleCall_2_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}
	public class ObjTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ObjType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cRectangleKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTriangleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCircleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//// ArrayDecl{variable=Decl{type=rectangle name=bullets} [ length=5 ] ; }
		////def isArray(Var it) { id.eContainer instanceof ArrayDecl }
		//ObjType:
		//	'rectangle' | 'triangle' | 'circle';
		@Override public ParserRule getRule() { return rule; }
		
		//'rectangle' | 'triangle' | 'circle'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'rectangle'
		public Keyword getRectangleKeyword_0() { return cRectangleKeyword_0; }
		
		//'triangle'
		public Keyword getTriangleKeyword_1() { return cTriangleKeyword_1; }
		
		//'circle'
		public Keyword getCircleKeyword_2() { return cCircleKeyword_2; }
	}
	public class AttrAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.AttrAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDFTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExprParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AttrAss:
		//	name=IDF '=' value=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDF '=' value=Expr
		public Group getGroup() { return cGroup; }
		
		//name=IDF
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_0_0() { return cNameIDFTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expr
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expr
		public RuleCall getValueExprParserRuleCall_2_0() { return cValueExprParserRuleCall_2_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	AnimBlock | EventBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//AnimBlock | EventBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_0() { return cAnimBlockParserRuleCall_0; }
		
		//EventBlock
		public RuleCall getEventBlockParserRuleCall_1() { return cEventBlockParserRuleCall_1; }
	}
	public class AnimBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.AnimBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnimationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamParamDeclParserRuleCall_3_0 = (RuleCall)cParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_5_0 = (RuleCall)cStmtBlockAssignment_5.eContents().get(0);
		
		//// animation' IDF '(' objType IDF ')' stmtBlock
		//AnimBlock:
		//	'animation' name=IDF '(' param=ParamDecl ')' stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'animation' name=IDF '(' param=ParamDecl ')' stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'animation'
		public Keyword getAnimationKeyword_0() { return cAnimationKeyword_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//param=ParamDecl
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }
		
		//ParamDecl
		public RuleCall getParamParamDeclParserRuleCall_3_0() { return cParamParamDeclParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_5() { return cStmtBlockAssignment_5; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_5_0() { return cStmtBlockStmtBlockParserRuleCall_5_0; }
	}
	public class ParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ParamDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeObjTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDFTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParamDecl:
		//	type=ObjType name=IDF;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ObjType name=IDF
		public Group getGroup() { return cGroup; }
		
		//type=ObjType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ObjType
		public RuleCall getTypeObjTypeParserRuleCall_0_0() { return cTypeObjTypeParserRuleCall_0_0; }
		
		//name=IDF
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDF
		public RuleCall getNameIDFTerminalRuleCall_1_0() { return cNameIDFTerminalRuleCall_1_0; }
	}
	public class EventBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.EventBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyStrokeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyStrokeKeyStrokeParserRuleCall_1_0 = (RuleCall)cKeyStrokeAssignment_1.eContents().get(0);
		private final Assignment cStmtBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_2_0 = (RuleCall)cStmtBlockAssignment_2.eContents().get(0);
		
		//EventBlock:
		//	'on' keyStroke=KeyStroke stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' keyStroke=KeyStroke stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//keyStroke=KeyStroke
		public Assignment getKeyStrokeAssignment_1() { return cKeyStrokeAssignment_1; }
		
		//KeyStroke
		public RuleCall getKeyStrokeKeyStrokeParserRuleCall_1_0() { return cKeyStrokeKeyStrokeParserRuleCall_1_0; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_2() { return cStmtBlockAssignment_2; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_2_0() { return cStmtBlockStmtBlockParserRuleCall_2_0; }
	}
	public class KeyStrokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.KeyStroke");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLeftarrowKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightarrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cUparrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDownarrowKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//KeyStroke:
		//	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
		@Override public ParserRule getRule() { return rule; }
		
		//'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'space'
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }
		
		//'leftarrow'
		public Keyword getLeftarrowKeyword_1() { return cLeftarrowKeyword_1; }
		
		//'rightarrow'
		public Keyword getRightarrowKeyword_2() { return cRightarrowKeyword_2; }
		
		//'uparrow'
		public Keyword getUparrowKeyword_3() { return cUparrowKeyword_3; }
		
		//'downarrow'
		public Keyword getDownarrowKeyword_4() { return cDownarrowKeyword_4; }
	}
	public class StmtBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.StmtBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// {StmtBlock} damit wird erreicht, dass diese Instanz auch dann erstellt wird, wenn kein Feature gesetzt wird
		//StmtBlock:
		//	{StmtBlock} '{' stmts+=Stmt* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StmtBlock} '{' stmts+=Stmt* '}'
		public Group getGroup() { return cGroup; }
		
		//{StmtBlock}
		public Action getStmtBlockAction_0() { return cStmtBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }
		
		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0() { return cStmtsStmtParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Stmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAssStmtParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Stmt:
		//	IfStmt | ForStmt | AssStmt ';';
		@Override public ParserRule getRule() { return rule; }
		
		//IfStmt | ForStmt | AssStmt ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_1() { return cForStmtParserRuleCall_1; }
		
		//AssStmt ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//AssStmt
		public RuleCall getAssStmtParserRuleCall_2_0() { return cAssStmtParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockStmtBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockStmtBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfStmt:
		//	'if' '(' condition=Expr ')' thenBlock=StmtBlock ('else' elseBlock=StmtBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expr ')' thenBlock=StmtBlock ('else' elseBlock=StmtBlock)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_2_0() { return cConditionExprParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=StmtBlock
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//StmtBlock
		public RuleCall getThenBlockStmtBlockParserRuleCall_4_0() { return cThenBlockStmtBlockParserRuleCall_4_0; }
		
		//('else' elseBlock=StmtBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=StmtBlock
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//StmtBlock
		public RuleCall getElseBlockStmtBlockParserRuleCall_5_1_0() { return cElseBlockStmtBlockParserRuleCall_5_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitAssStmtParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExprParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopAssStmtParserRuleCall_6_0 = (RuleCall)cLoopAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStmtBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStmtBlockStmtBlockParserRuleCall_8_0 = (RuleCall)cStmtBlockAssignment_8.eContents().get(0);
		
		//ForStmt:
		//	'for' '(' init=AssStmt ';' condition=Expr ';' loop=AssStmt ')' stmtBlock=StmtBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' init=AssStmt ';' condition=Expr ';' loop=AssStmt ')' stmtBlock=StmtBlock
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//init=AssStmt
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//AssStmt
		public RuleCall getInitAssStmtParserRuleCall_2_0() { return cInitAssStmtParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//condition=Expr
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expr
		public RuleCall getConditionExprParserRuleCall_4_0() { return cConditionExprParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//loop=AssStmt
		public Assignment getLoopAssignment_6() { return cLoopAssignment_6; }
		
		//AssStmt
		public RuleCall getLoopAssStmtParserRuleCall_6_0() { return cLoopAssStmtParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//stmtBlock=StmtBlock
		public Assignment getStmtBlockAssignment_8() { return cStmtBlockAssignment_8; }
		
		//StmtBlock
		public RuleCall getStmtBlockStmtBlockParserRuleCall_8_0() { return cStmtBlockStmtBlockParserRuleCall_8_0; }
	}
	public class AssStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.AssStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVarParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AssStmt:
		//	variable=Var '=' expression=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=Var '=' expression=Expr
		public Group getGroup() { return cGroup; }
		
		//variable=Var
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//Var
		public RuleCall getVariableVarParserRuleCall_0_0() { return cVariableVarParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expr
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expr
		public RuleCall getExpressionExprParserRuleCall_2_0() { return cExpressionExprParserRuleCall_2_0; }
	}
	public class AllDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.AllDecls");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProgParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAnimBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParamDeclParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AllDecls:
		//	Prog | Decl | AnimBlock | ParamDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//Prog | Decl | AnimBlock | ParamDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Prog
		public RuleCall getProgParserRuleCall_0() { return cProgParserRuleCall_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_1() { return cDeclParserRuleCall_1; }
		
		//AnimBlock
		public RuleCall getAnimBlockParserRuleCall_2() { return cAnimBlockParserRuleCall_2; }
		
		//ParamDecl
		public RuleCall getParamDeclParserRuleCall_3() { return cParamDeclParserRuleCall_3; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIdAllDeclsCrossReference_0_0 = (CrossReference)cIdAssignment_0.eContents().get(0);
		private final RuleCall cIdAllDeclsIDFTerminalRuleCall_0_0_1 = (RuleCall)cIdAllDeclsCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cElementSelectVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExprParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cMemberSelectVariableAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMemberNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMemberNameIDFTerminalRuleCall_2_2_0 = (RuleCall)cMemberNameAssignment_2_2.eContents().get(0);
		
		//Var:
		//	id=[AllDecls|IDF] ({ElementSelect.variable=current} '[' index=Expr ']')? ({MemberSelect.variable=current} '.'
		//	memberName=IDF)?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=[AllDecls|IDF] ({ElementSelect.variable=current} '[' index=Expr ']')? ({MemberSelect.variable=current} '.'
		//memberName=IDF)?
		public Group getGroup() { return cGroup; }
		
		//id=[AllDecls|IDF]
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//[AllDecls|IDF]
		public CrossReference getIdAllDeclsCrossReference_0_0() { return cIdAllDeclsCrossReference_0_0; }
		
		//IDF
		public RuleCall getIdAllDeclsIDFTerminalRuleCall_0_0_1() { return cIdAllDeclsIDFTerminalRuleCall_0_0_1; }
		
		//({ElementSelect.variable=current} '[' index=Expr ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ElementSelect.variable=current}
		public Action getElementSelectVariableAction_1_0() { return cElementSelectVariableAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//index=Expr
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }
		
		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_0() { return cIndexExprParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//({MemberSelect.variable=current} '.' memberName=IDF)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{MemberSelect.variable=current}
		public Action getMemberSelectVariableAction_2_0() { return cMemberSelectVariableAction_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//memberName=IDF
		public Assignment getMemberNameAssignment_2_2() { return cMemberNameAssignment_2_2; }
		
		//IDF
		public RuleCall getMemberNameIDFTerminalRuleCall_2_2_0() { return cMemberNameIDFTerminalRuleCall_2_2_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.Expr");
		private final RuleCall cDisjExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	DisjExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//DisjExpr
		public RuleCall getDisjExprParserRuleCall() { return cDisjExprParserRuleCall; }
	}
	public class DisjExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.DisjExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//DisjExpr Expr:
		//	ConjExpr ({Or.left=current} '||' right=ConjExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConjExpr ({Or.left=current} '||' right=ConjExpr)*
		public Group getGroup() { return cGroup; }
		
		//ConjExpr
		public RuleCall getConjExprParserRuleCall_0() { return cConjExprParserRuleCall_0; }
		
		//({Or.left=current} '||' right=ConjExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=ConjExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConjExpr
		public RuleCall getRightConjExprParserRuleCall_1_2_0() { return cRightConjExprParserRuleCall_1_2_0; }
	}
	public class ConjExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ConjExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConjExpr Expr:
		//	RelExpr ({And.left=current} '&&' right=RelExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelExpr ({And.left=current} '&&' right=RelExpr)*
		public Group getGroup() { return cGroup; }
		
		//RelExpr
		public RuleCall getRelExprParserRuleCall_0() { return cRelExprParserRuleCall_0; }
		
		//({And.left=current} '&&' right=RelExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=RelExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RelExpr
		public RuleCall getRightRelExprParserRuleCall_1_2_0() { return cRightRelExprParserRuleCall_1_2_0; }
	}
	public class RelExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.RelExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLessLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cLessOrEqualsLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAddExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelExpr Expr:
		//	AddExpr (({Equals.left=current} '==' | {Less.left=current} '<' | {LessOrEquals.left=current} '<=') right=AddExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddExpr (({Equals.left=current} '==' | {Less.left=current} '<' | {LessOrEquals.left=current} '<=') right=AddExpr)*
		public Group getGroup() { return cGroup; }
		
		//AddExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }
		
		//(({Equals.left=current} '==' | {Less.left=current} '<' | {LessOrEquals.left=current} '<=') right=AddExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equals.left=current} '==' | {Less.left=current} '<' | {LessOrEquals.left=current} '<='
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equals.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_0() { return cEqualsLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{Less.left=current} '<'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Less.left=current}
		public Action getLessLeftAction_1_0_1_0() { return cLessLeftAction_1_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }
		
		//{LessOrEquals.left=current} '<='
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{LessOrEquals.left=current}
		public Action getLessOrEqualsLeftAction_1_0_2_0() { return cLessOrEqualsLeftAction_1_0_2_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_2_1() { return cLessThanSignEqualsSignKeyword_1_0_2_1; }
		
		//right=AddExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AddExpr
		public RuleCall getRightAddExprParserRuleCall_1_1_0() { return cRightAddExprParserRuleCall_1_1_0; }
	}
	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.AddExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AddExpr Expr:
		//	MultExpr (({Plus.left=current} '+' | {Minus.left=current} '-') right=MultExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultExpr (({Plus.left=current} '+' | {Minus.left=current} '-') right=MultExpr)*
		public Group getGroup() { return cGroup; }
		
		//MultExpr
		public RuleCall getMultExprParserRuleCall_0() { return cMultExprParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MultExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultExpr
		public RuleCall getRightMultExprParserRuleCall_1_1_0() { return cRightMultExprParserRuleCall_1_1_0; }
	}
	public class MultExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.MultExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cDivideLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cTimesLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultExpr Expr:
		//	UnaryExpr (({Divide.left=current} '/' | {Times.left=current} '*') right=UnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr (({Divide.left=current} '/' | {Times.left=current} '*') right=UnaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//(({Divide.left=current} '/' | {Times.left=current} '*') right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Divide.left=current} '/' | {Times.left=current} '*'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Divide.left=current} '/'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Divide.left=current}
		public Action getDivideLeftAction_1_0_0_0() { return cDivideLeftAction_1_0_0_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_0_1() { return cSolidusKeyword_1_0_0_1; }
		
		//{Times.left=current} '*'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Times.left=current}
		public Action getTimesLeftAction_1_0_1_0() { return cTimesLeftAction_1_0_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1_1() { return cAsteriskKeyword_1_0_1_1; }
		
		//right=UnaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_1_0() { return cRightUnaryExprParserRuleCall_1_1_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Action cNegationAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Action cComplementAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Assignment cExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprUnaryExprParserRuleCall_0_1_0 = (RuleCall)cExprAssignment_0_1.eContents().get(0);
		private final RuleCall cPrimExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpr Expr:
		//	({Negation} '-' | {Complement} '!') expr=UnaryExpr | PrimExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//({Negation} '-' | {Complement} '!') expr=UnaryExpr | PrimExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({Negation} '-' | {Complement} '!') expr=UnaryExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//{Negation} '-' | {Complement} '!'
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//{Negation} '-'
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//{Negation}
		public Action getNegationAction_0_0_0_0() { return cNegationAction_0_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0_0_1() { return cHyphenMinusKeyword_0_0_0_1; }
		
		//{Complement} '!'
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//{Complement}
		public Action getComplementAction_0_0_1_0() { return cComplementAction_0_0_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0_0_1_1() { return cExclamationMarkKeyword_0_0_1_1; }
		
		//expr=UnaryExpr
		public Assignment getExprAssignment_0_1() { return cExprAssignment_0_1; }
		
		//UnaryExpr
		public RuleCall getExprUnaryExprParserRuleCall_0_1_0() { return cExprUnaryExprParserRuleCall_0_1_0; }
		
		//PrimExpr
		public RuleCall getPrimExprParserRuleCall_1() { return cPrimExprParserRuleCall_1; }
	}
	public class PrimExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.PrimExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cTouchesLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cTouchesKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightVarParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimExpr Expr:
		//	{NumberLiteral} value=NUMBER | Var ({Touches.left=current} 'touches' right=Var)? | '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberLiteral} value=NUMBER | Var ({Touches.left=current} 'touches' right=Var)? | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NumberLiteral} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{NumberLiteral}
		public Action getNumberLiteralAction_0_0() { return cNumberLiteralAction_0_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0_1_0() { return cValueNUMBERTerminalRuleCall_0_1_0; }
		
		//Var ({Touches.left=current} 'touches' right=Var)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Var
		public RuleCall getVarParserRuleCall_1_0() { return cVarParserRuleCall_1_0; }
		
		//({Touches.left=current} 'touches' right=Var)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Touches.left=current}
		public Action getTouchesLeftAction_1_1_0() { return cTouchesLeftAction_1_1_0; }
		
		//'touches'
		public Keyword getTouchesKeyword_1_1_1() { return cTouchesKeyword_1_1_1; }
		
		//right=Var
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Var
		public RuleCall getRightVarParserRuleCall_1_1_2_0() { return cRightVarParserRuleCall_1_1_2_0; }
		
		//'(' Expr ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2_1() { return cExprParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	
	
	private final ProgElements pProg;
	private final DeclElements pDecl;
	private final VarDeclElements pVarDecl;
	private final InitElements pInit;
	private final ObjDeclElements pObjDecl;
	private final ObjTypeElements pObjType;
	private final AttrAssElements pAttrAss;
	private final BlockElements pBlock;
	private final AnimBlockElements pAnimBlock;
	private final ParamDeclElements pParamDecl;
	private final EventBlockElements pEventBlock;
	private final KeyStrokeElements pKeyStroke;
	private final StmtBlockElements pStmtBlock;
	private final StmtElements pStmt;
	private final IfStmtElements pIfStmt;
	private final ForStmtElements pForStmt;
	private final AssStmtElements pAssStmt;
	private final AllDeclsElements pAllDecls;
	private final VarElements pVar;
	private final ExprElements pExpr;
	private final DisjExprElements pDisjExpr;
	private final ConjExprElements pConjExpr;
	private final RelExprElements pRelExpr;
	private final AddExprElements pAddExpr;
	private final MultExprElements pMultExpr;
	private final UnaryExprElements pUnaryExpr;
	private final PrimExprElements pPrimExpr;
	private final TerminalRule tIDF;
	private final TerminalRule tNUMBER;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MGPLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProg = new ProgElements();
		this.pDecl = new DeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pInit = new InitElements();
		this.pObjDecl = new ObjDeclElements();
		this.pObjType = new ObjTypeElements();
		this.pAttrAss = new AttrAssElements();
		this.pBlock = new BlockElements();
		this.pAnimBlock = new AnimBlockElements();
		this.pParamDecl = new ParamDeclElements();
		this.pEventBlock = new EventBlockElements();
		this.pKeyStroke = new KeyStrokeElements();
		this.pStmtBlock = new StmtBlockElements();
		this.pStmt = new StmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pAssStmt = new AssStmtElements();
		this.pAllDecls = new AllDeclsElements();
		this.pVar = new VarElements();
		this.pExpr = new ExprElements();
		this.pDisjExpr = new DisjExprElements();
		this.pConjExpr = new ConjExprElements();
		this.pRelExpr = new RelExprElements();
		this.pAddExpr = new AddExprElements();
		this.pMultExpr = new MultExprElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pPrimExpr = new PrimExprElements();
		this.tIDF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.IDF");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.NUMBER");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mgpl.MGPL.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mgpl.MGPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// ### MGPL-Grammatik
	//Prog:
	//	'game' name=IDF
	//	'(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')'
	//	declarations+=Decl*
	//	init=StmtBlock
	//	blocks+=Block*;
	public ProgElements getProgAccess() {
		return pProg;
	}
	
	public ParserRule getProgRule() {
		return getProgAccess().getRule();
	}
	
	//Decl:
	//	(VarDecl | ObjDecl) ';';
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//VarDecl:
	//	type='int' name=IDF (init=Init? | {ArrayDecl.variable=current} '[' length=NUMBER ']');
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//Init:
	//	'=' Expr;
	public InitElements getInitAccess() {
		return pInit;
	}
	
	public ParserRule getInitRule() {
		return getInitAccess().getRule();
	}
	
	//ObjDecl:
	//	type=ObjType name=IDF ('(' (attr+=AttrAss (',' attr+=AttrAss)*)? ')' | {ArrayDecl.variable=current} '[' length=NUMBER
	//	']');
	public ObjDeclElements getObjDeclAccess() {
		return pObjDecl;
	}
	
	public ParserRule getObjDeclRule() {
		return getObjDeclAccess().getRule();
	}
	
	//// ArrayDecl{variable=Decl{type=rectangle name=bullets} [ length=5 ] ; }
	////def isArray(Var it) { id.eContainer instanceof ArrayDecl }
	//ObjType:
	//	'rectangle' | 'triangle' | 'circle';
	public ObjTypeElements getObjTypeAccess() {
		return pObjType;
	}
	
	public ParserRule getObjTypeRule() {
		return getObjTypeAccess().getRule();
	}
	
	//AttrAss:
	//	name=IDF '=' value=Expr;
	public AttrAssElements getAttrAssAccess() {
		return pAttrAss;
	}
	
	public ParserRule getAttrAssRule() {
		return getAttrAssAccess().getRule();
	}
	
	//Block:
	//	AnimBlock | EventBlock;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//// animation' IDF '(' objType IDF ')' stmtBlock
	//AnimBlock:
	//	'animation' name=IDF '(' param=ParamDecl ')' stmtBlock=StmtBlock;
	public AnimBlockElements getAnimBlockAccess() {
		return pAnimBlock;
	}
	
	public ParserRule getAnimBlockRule() {
		return getAnimBlockAccess().getRule();
	}
	
	//ParamDecl:
	//	type=ObjType name=IDF;
	public ParamDeclElements getParamDeclAccess() {
		return pParamDecl;
	}
	
	public ParserRule getParamDeclRule() {
		return getParamDeclAccess().getRule();
	}
	
	//EventBlock:
	//	'on' keyStroke=KeyStroke stmtBlock=StmtBlock;
	public EventBlockElements getEventBlockAccess() {
		return pEventBlock;
	}
	
	public ParserRule getEventBlockRule() {
		return getEventBlockAccess().getRule();
	}
	
	//KeyStroke:
	//	'space' | 'leftarrow' | 'rightarrow' | 'uparrow' | 'downarrow';
	public KeyStrokeElements getKeyStrokeAccess() {
		return pKeyStroke;
	}
	
	public ParserRule getKeyStrokeRule() {
		return getKeyStrokeAccess().getRule();
	}
	
	//// {StmtBlock} damit wird erreicht, dass diese Instanz auch dann erstellt wird, wenn kein Feature gesetzt wird
	//StmtBlock:
	//	{StmtBlock} '{' stmts+=Stmt* '}';
	public StmtBlockElements getStmtBlockAccess() {
		return pStmtBlock;
	}
	
	public ParserRule getStmtBlockRule() {
		return getStmtBlockAccess().getRule();
	}
	
	//Stmt:
	//	IfStmt | ForStmt | AssStmt ';';
	public StmtElements getStmtAccess() {
		return pStmt;
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}
	
	//IfStmt:
	//	'if' '(' condition=Expr ')' thenBlock=StmtBlock ('else' elseBlock=StmtBlock)?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//ForStmt:
	//	'for' '(' init=AssStmt ';' condition=Expr ';' loop=AssStmt ')' stmtBlock=StmtBlock;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//AssStmt:
	//	variable=Var '=' expression=Expr;
	public AssStmtElements getAssStmtAccess() {
		return pAssStmt;
	}
	
	public ParserRule getAssStmtRule() {
		return getAssStmtAccess().getRule();
	}
	
	//AllDecls:
	//	Prog | Decl | AnimBlock | ParamDecl;
	public AllDeclsElements getAllDeclsAccess() {
		return pAllDecls;
	}
	
	public ParserRule getAllDeclsRule() {
		return getAllDeclsAccess().getRule();
	}
	
	//Var:
	//	id=[AllDecls|IDF] ({ElementSelect.variable=current} '[' index=Expr ']')? ({MemberSelect.variable=current} '.'
	//	memberName=IDF)?;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//Expr:
	//	DisjExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//DisjExpr Expr:
	//	ConjExpr ({Or.left=current} '||' right=ConjExpr)*;
	public DisjExprElements getDisjExprAccess() {
		return pDisjExpr;
	}
	
	public ParserRule getDisjExprRule() {
		return getDisjExprAccess().getRule();
	}
	
	//ConjExpr Expr:
	//	RelExpr ({And.left=current} '&&' right=RelExpr)*;
	public ConjExprElements getConjExprAccess() {
		return pConjExpr;
	}
	
	public ParserRule getConjExprRule() {
		return getConjExprAccess().getRule();
	}
	
	//RelExpr Expr:
	//	AddExpr (({Equals.left=current} '==' | {Less.left=current} '<' | {LessOrEquals.left=current} '<=') right=AddExpr)*;
	public RelExprElements getRelExprAccess() {
		return pRelExpr;
	}
	
	public ParserRule getRelExprRule() {
		return getRelExprAccess().getRule();
	}
	
	//AddExpr Expr:
	//	MultExpr (({Plus.left=current} '+' | {Minus.left=current} '-') right=MultExpr)*;
	public AddExprElements getAddExprAccess() {
		return pAddExpr;
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}
	
	//MultExpr Expr:
	//	UnaryExpr (({Divide.left=current} '/' | {Times.left=current} '*') right=UnaryExpr)*;
	public MultExprElements getMultExprAccess() {
		return pMultExpr;
	}
	
	public ParserRule getMultExprRule() {
		return getMultExprAccess().getRule();
	}
	
	//UnaryExpr Expr:
	//	({Negation} '-' | {Complement} '!') expr=UnaryExpr | PrimExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//PrimExpr Expr:
	//	{NumberLiteral} value=NUMBER | Var ({Touches.left=current} 'touches' right=Var)? | '(' Expr ')';
	public PrimExprElements getPrimExprAccess() {
		return pPrimExpr;
	}
	
	public ParserRule getPrimExprRule() {
		return getPrimExprAccess().getRule();
	}
	
	//terminal IDF:
	//	('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDFRule() {
		return tIDF;
	}
	
	//terminal NUMBER returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal COMMENT:
	//	'//' !('\n' | '\r')*;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
