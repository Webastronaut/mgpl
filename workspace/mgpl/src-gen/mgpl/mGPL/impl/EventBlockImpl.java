/**
 * generated by Xtext 2.16.0
 */
package mgpl.mGPL.impl;

import mgpl.mGPL.EventBlock;
import mgpl.mGPL.MGPLPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mgpl.mGPL.impl.EventBlockImpl#getKeyStroke <em>Key Stroke</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventBlockImpl extends BlockImpl implements EventBlock
{
  /**
   * The default value of the '{@link #getKeyStroke() <em>Key Stroke</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyStroke()
   * @generated
   * @ordered
   */
  protected static final String KEY_STROKE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyStroke() <em>Key Stroke</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyStroke()
   * @generated
   * @ordered
   */
  protected String keyStroke = KEY_STROKE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGPLPackage.Literals.EVENT_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyStroke()
  {
    return keyStroke;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyStroke(String newKeyStroke)
  {
    String oldKeyStroke = keyStroke;
    keyStroke = newKeyStroke;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGPLPackage.EVENT_BLOCK__KEY_STROKE, oldKeyStroke, keyStroke));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGPLPackage.EVENT_BLOCK__KEY_STROKE:
        return getKeyStroke();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGPLPackage.EVENT_BLOCK__KEY_STROKE:
        setKeyStroke((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.EVENT_BLOCK__KEY_STROKE:
        setKeyStroke(KEY_STROKE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGPLPackage.EVENT_BLOCK__KEY_STROKE:
        return KEY_STROKE_EDEFAULT == null ? keyStroke != null : !KEY_STROKE_EDEFAULT.equals(keyStroke);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (keyStroke: ");
    result.append(keyStroke);
    result.append(')');
    return result.toString();
  }

} //EventBlockImpl
