/**
 * generated by Xtext 2.16.0
 */
package mgpl.mGPL.impl;

import mgpl.mGPL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MGPLFactoryImpl extends EFactoryImpl implements MGPLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MGPLFactory init()
  {
    try
    {
      MGPLFactory theMGPLFactory = (MGPLFactory)EPackage.Registry.INSTANCE.getEFactory(MGPLPackage.eNS_URI);
      if (theMGPLFactory != null)
      {
        return theMGPLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MGPLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MGPLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MGPLPackage.PROG: return createProg();
      case MGPLPackage.DECL: return createDecl();
      case MGPLPackage.VAR_DECL: return createVarDecl();
      case MGPLPackage.INIT: return createInit();
      case MGPLPackage.OBJ_DECL: return createObjDecl();
      case MGPLPackage.ATTR_ASS: return createAttrAss();
      case MGPLPackage.BLOCK: return createBlock();
      case MGPLPackage.ANIM_BLOCK: return createAnimBlock();
      case MGPLPackage.PARAM_DECL: return createParamDecl();
      case MGPLPackage.EVENT_BLOCK: return createEventBlock();
      case MGPLPackage.STMT_BLOCK: return createStmtBlock();
      case MGPLPackage.STMT: return createStmt();
      case MGPLPackage.IF_STMT: return createIfStmt();
      case MGPLPackage.FOR_STMT: return createForStmt();
      case MGPLPackage.ASS_STMT: return createAssStmt();
      case MGPLPackage.ALL_DECLS: return createAllDecls();
      case MGPLPackage.VAR: return createVar();
      case MGPLPackage.EXPR: return createExpr();
      case MGPLPackage.ARRAY_DECL: return createArrayDecl();
      case MGPLPackage.ELEMENT_SELECT: return createElementSelect();
      case MGPLPackage.MEMBER_SELECT: return createMemberSelect();
      case MGPLPackage.OR: return createOr();
      case MGPLPackage.AND: return createAnd();
      case MGPLPackage.EQUALS: return createEquals();
      case MGPLPackage.LESS: return createLess();
      case MGPLPackage.LESS_OR_EQUALS: return createLessOrEquals();
      case MGPLPackage.PLUS: return createPlus();
      case MGPLPackage.MINUS: return createMinus();
      case MGPLPackage.DIVIDE: return createDivide();
      case MGPLPackage.TIMES: return createTimes();
      case MGPLPackage.NEGATION: return createNegation();
      case MGPLPackage.COMPLEMENT: return createComplement();
      case MGPLPackage.NUMBER_LITERAL: return createNumberLiteral();
      case MGPLPackage.TOUCHES: return createTouches();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Prog createProg()
  {
    ProgImpl prog = new ProgImpl();
    return prog;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Decl createDecl()
  {
    DeclImpl decl = new DeclImpl();
    return decl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Init createInit()
  {
    InitImpl init = new InitImpl();
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjDecl createObjDecl()
  {
    ObjDeclImpl objDecl = new ObjDeclImpl();
    return objDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrAss createAttrAss()
  {
    AttrAssImpl attrAss = new AttrAssImpl();
    return attrAss;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnimBlock createAnimBlock()
  {
    AnimBlockImpl animBlock = new AnimBlockImpl();
    return animBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamDecl createParamDecl()
  {
    ParamDeclImpl paramDecl = new ParamDeclImpl();
    return paramDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBlock createEventBlock()
  {
    EventBlockImpl eventBlock = new EventBlockImpl();
    return eventBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StmtBlock createStmtBlock()
  {
    StmtBlockImpl stmtBlock = new StmtBlockImpl();
    return stmtBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stmt createStmt()
  {
    StmtImpl stmt = new StmtImpl();
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStmt createIfStmt()
  {
    IfStmtImpl ifStmt = new IfStmtImpl();
    return ifStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStmt createForStmt()
  {
    ForStmtImpl forStmt = new ForStmtImpl();
    return forStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssStmt createAssStmt()
  {
    AssStmtImpl assStmt = new AssStmtImpl();
    return assStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllDecls createAllDecls()
  {
    AllDeclsImpl allDecls = new AllDeclsImpl();
    return allDecls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDecl createArrayDecl()
  {
    ArrayDeclImpl arrayDecl = new ArrayDeclImpl();
    return arrayDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementSelect createElementSelect()
  {
    ElementSelectImpl elementSelect = new ElementSelectImpl();
    return elementSelect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MemberSelect createMemberSelect()
  {
    MemberSelectImpl memberSelect = new MemberSelectImpl();
    return memberSelect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals createEquals()
  {
    EqualsImpl equals = new EqualsImpl();
    return equals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Less createLess()
  {
    LessImpl less = new LessImpl();
    return less;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessOrEquals createLessOrEquals()
  {
    LessOrEqualsImpl lessOrEquals = new LessOrEqualsImpl();
    return lessOrEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Divide createDivide()
  {
    DivideImpl divide = new DivideImpl();
    return divide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Times createTimes()
  {
    TimesImpl times = new TimesImpl();
    return times;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Negation createNegation()
  {
    NegationImpl negation = new NegationImpl();
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Complement createComplement()
  {
    ComplementImpl complement = new ComplementImpl();
    return complement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Touches createTouches()
  {
    TouchesImpl touches = new TouchesImpl();
    return touches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MGPLPackage getMGPLPackage()
  {
    return (MGPLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MGPLPackage getPackage()
  {
    return MGPLPackage.eINSTANCE;
  }

} //MGPLFactoryImpl
